#!/bin/bash
# pseudoreplicator 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.

set -e -x

main() {

    echo "Value of input_bam: '$input_bam'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

    input_bam_name=`dx describe --name "$input_bam"`
    dx download "$input_bam" -o "$input_bam_name"

    # Fill in your application code here.
    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    prefix="${input_bam_name%.bam}"
    lines=`samtools view "$input_bam_name" | wc -l`

    samtools view -H "$input_bam_name" > $prefix.header

    echo $prefix.header
    echo ${prefix}_pr
    filterpipe="cat ${prefix}.header - | samtools view -bS - | samtools sort -o - ${prefix}_sort >"
    samtools bamshuf -O "$input_bam_name" ${prefix}_shuf | samtools view - | split -l `expr $lines / 2 + 1` -d --filter="$filterpipe"'$FILE.bam' - ${prefix}_pr
    #samtools bamshuf "input_bam_name" ${prefix}_shuf
    #samtools view ${prefix}_shuf.bam | split -l `expr $lines / 2 + 1` -d --filter="$filterpipe"'$FILE.bam' - ${prefix}_pr
    #samtools bamshuf -O wgEncodeBroadHistoneK562ControlStdAlnRep1.bam shuftemp | samtools view - | split -l 9785175 -d --filter='cat wgEncodeBroadHistoneK562ControlStdAlnRep1.header - | samtools view -bS - | samtools sort -o - sorttemp > $FILE.bam' - wgEncodeBroadHistoneK562ControlStdAlnRep1_pseudo

    ls

    # The following line(s) use the dx command-line tool to upload your file
    # outputs after you have created them on the local file system.  It assumes
    # that you have used the output field name for the filename for each output,
    # but you can change that behavior to suit your needs.  Run "dx upload -h"
    # to see more options to set metadata.


    pseudoreplicate_bam1=$(dx upload "${prefix}_pr00.bam" --brief)
    pseudoreplicate_bam2=$(dx upload "${prefix}_pr01.bam" --brief)

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    dx-jobutil-add-output pseudoreplicate_bam1 "$pseudoreplicate_bam1" --class=file
    dx-jobutil-add-output pseudoreplicate_bam2 "$pseudoreplicate_bam2" --class=file
}
