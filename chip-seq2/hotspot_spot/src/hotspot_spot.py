#!/usr/bin/env python
# hotspot_spot 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# See https://wiki.dnanexus.com/Developer-Portal for documentation and
# tutorials on how to modify this file.
#
# DNAnexus Python Bindings (dxpy) documentation:
#   http://autodoc.dnanexus.com/bindings/python/current/

import os
import subprocess

import dxpy

TOKENS_TXT_FILENAME = '/hotspot-distr-v4/runall.tokens.txt'
RUNHOTSPOT_FILENAME = '/hotspot-distr-v4/runhotspot'
OUTPUT_DIR = '/hotspot_output'
RAN_DIR = '/hotspot_ran_output'
INPUT_DIR = '/input_data'

def download_and_gunzip_file(input_file, dir_name='', skip_decompress=False):
    input_file = dxpy.DXFile(input_file)
    input_filename = input_file.describe()['name']
    ofn = os.path.join(dir_name, input_filename)

    cmd = 'dx download ' + input_file.get_id() + ' -o '
    if input_filename.endswith('.tar.gz') and not skip_decompress:
        cmd += '- | tar -zxvf - > '
        ofn = ofn.replace('.tar.gz', '')
    elif (os.path.splitext(input_filename)[-1] == '.gz') and not skip_decompress:
        cmd += '- | gunzip > '
        ofn = os.path.splitext(ofn)[0]
    cmd += ofn
    print cmd
    subprocess.check_call(cmd, shell=True)

    return ofn

@dxpy.entry_point('main')
def main(**job_inputs):
    os.mkdir(OUTPUT_DIR)
    os.mkdir(RAN_DIR)
    os.mkdir(INPUT_DIR)

    input_bam_filename = download_and_gunzip_file(job_inputs['bam_file'], INPUT_DIR)

    chromosome_info_filename = download_and_gunzip_file(job_inputs['chromosome_info'], INPUT_DIR)

    mappability_filename = download_and_gunzip_file(job_inputs['mappability_file'], INPUT_DIR)

    if 'omit_regions' in job_inputs:
        omit_regions_filename = download_and_gunzip_file(job_inputs['omit_regions'], INPUT_DIR)
    else:
        omit_regions_filename = ''

    subtract_background = 'F'
    background_bam_filename = ''
    if 'background_bam_file' in job_inputs:
        background_bam_filename = download_and_gunzip_file(job_inputs['background_bam_file'], INPUT_DIR)
        subtract_background = 'T'

    tokens_txt = open(TOKENS_TXT_FILENAME).read()
    tokens_txt = tokens_txt.format(INPUT_BAM_FILE=input_bam_filename,
                                   SUBTRACT_BACKGROUND=subtract_background,
                                   BACKGROUND_BAM_FILE=background_bam_filename,
                                   TAG_LENGTH=job_inputs['tag_length'],
                                   CHROM_FILE=chromosome_info_filename,
                                   MAPPABILITY_FILE=mappability_filename,
                                   OUTPUT_DIR=OUTPUT_DIR,
                                   OMIT_REGIONS=omit_regions_filename,
                                   RAN_DIR=RAN_DIR)
    open(TOKENS_TXT_FILENAME, 'w').write(tokens_txt)
    print tokens_txt + '\n*************\n'

    runhotspot_txt = open(RUNHOTSPOT_FILENAME).read()
    if job_inputs['run_spot_only']:
        runhotspot_txt = runhotspot_txt.format(RUN_SPOT_ONLY='', RUN_EVERYTHING='#')
    else:
        runhotspot_txt = runhotspot_txt.format(RUN_SPOT_ONLY='#', RUN_EVERYTHING='')
    open(RUNHOTSPOT_FILENAME, 'w').write(runhotspot_txt)
    print runhotspot_txt

    cmd = RUNHOTSPOT_FILENAME
    print cmd
    subprocess.check_call(cmd, shell=True)

    cmd = 'tar zcvf hotspot_output.tar.gz ' + OUTPUT_DIR
    print cmd
    subprocess.check_call(cmd, shell=True)

    output_file = dxpy.upload_local_file('hotspot_output.tar.gz')

    output = {}
    output['hotspot_output'] = dxpy.dxlink(output_file)
    #output["min_threshold_hotspots"] = dxpy.dxlink(min_threshold_hotspots)
    #output["fdr_threshold_hotspots"] = dxpy.dxlink(fdr_threshold_hotspots)
    #output["fdr_threshold_peaks"] = dxpy.dxlink(fdr_threshold_peaks)
    #output["fdr_threshold_smoothed_density_peaks"] = dxpy.dxlink(fdr_threshold_smoothed_density_peaks)
    #output["z_scores"] = dxpy.dxlink(z_scores)
    #output["p_values"] = dxpy.dxlink(p_values)
    #output["spot_score"] = spot_score

    return output

dxpy.run()
