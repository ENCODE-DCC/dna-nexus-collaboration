#!/usr/bin/env python
# merge_bams 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# See https://wiki.dnanexus.com/Developer-Portal for documentation and
# tutorials on how to modify this file.
#
# DNAnexus Python Bindings (dxpy) documentation:
#   http://autodoc.dnanexus.com/bindings/python/current/

import os
import subprocess
import multiprocessing

import dxpy

def sort_bam(input_bam, quality_filter, remove_duplicates):
    input_bam = dxpy.DXFile(input_bam)
    fn = input_bam.describe()['name']
    sorted_ofn = os.path.splitext(fn)[0] + '_sorted.bam'
    dxpy.download_dxfile(input_bam.get_id(), fn)
    cmd = '/sambamba sort -o /dev/stdout {0} '.format(fn)
    if quality_filter:
        cmd += '| /sambamba view -F "(mapping_quality > 1) and not unmapped" -o /dev/stdout /dev/stdin '
    cmd += '> ' + sorted_ofn
    print cmd
    subprocess.check_call(cmd, shell=True)

    if remove_duplicates:
        deduped_ofn = os.path.splitext(sorted_ofn)['0'] + '_deduped.bam'
        md_metrics_ofn = os.path.splitext(sorted_ofn)['0'] + '_deduped_metrics.txt'
        cmd = 'java -jar /MarkDuplicates.jar I={0} O={1} METRICS_FILE={2} VALIDATION_STRINGENCY=LENIENT REMOVE_DUPLICATES=true '.format(sorted_ofn, deduped_ofn, md_metrics_ofn)
        print cmd
        subprocess.check_call(cmd, shell=True)
        bam_file = dxpy.upload_local_file(deduped_ofn)
        metrics_file = dxpy.upload_local_file(md_metrics_ofn)
    else:
        bam_file = dxpy.upload_local_file(sorted_ofn)
        metrics_file = None


    return (dxpy.dxlink(bam_file.get_id()), dxpy.dxlink(metrics_file.get_id()))

@dxpy.entry_point('main')
def main(input_bams, quality_filter=True, remove_duplicates=True):
    pool = multiprocessing.Pool()
    output_bams = []
    for input_bam in input_bams:
        output_bams += [pool.apply_async(sort_bam, (input_bam, quality_filter, remove_duplicates))]

    pool.close()
    pool.join()

    outputs_bams = [b.get(timeout=10) for b in output_bams]

    (bams, metrics_files) = zip(*outputs_bams)

    output = {'output_bams': list(bams)}
    if metrics_files[0] is not None:
        output['dedup_metrics_files'] = list(metrics_files)

    return output

dxpy.run()
