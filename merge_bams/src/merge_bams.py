#!/usr/bin/env python
# merge_bams 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# See https://wiki.dnanexus.com/Developer-Portal for documentation and
# tutorials on how to modify this file.
#
# DNAnexus Python Bindings (dxpy) documentation:
#   http://autodoc.dnanexus.com/bindings/python/current/

import os
import subprocess
import multiprocessing

import dxpy

def download_and_gunzip_file(input_file, skip_decompress=False):
    input_file = dxpy.DXFile(input_file)
    input_filename = input_file.describe()['name']
    ofn = input_filename

    cmd = 'dx download ' + input_file.get_id() + ' -o '
    if input_filename.endswith('.tar.gz') and not skip_decompress:
        cmd += '- | tar -zxvf - > '
        ofn = ofn.replace('.tar.gz', '')
    elif os.path.splitext(input_filename)[-1] == '.gz':
        cmd += '- | gunzip > '
        ofn = os.path.splitext(ofn)[0]
    cmd += ofn
    print cmd
    subprocess.check_call(cmd, shell=True)

    return ofn

def download_dx_files(dx_files, skip_decompress=False):
    pool = multiprocessing.Pool()
    results = []
    for dx_file in dx_files:
        results += [pool.apply_async(download_and_gunzip_file, args=(dx_file,))]
    pool.close()
    pool.join()

    # 10 seconds is kind of ridiculous considering the value should be ready
    # immediately, but I'd hate to get done downloading a huge file and
    # then error out because the value took a little long to get to me.  But
    # really, this should never happen.
    return [r.get(timeout=10) for r in results]

@dxpy.entry_point('main')
def main(input_bams):
    input_bams = download_dx_files(input_bams)

    ofn = os.path.commonprefix(input_bams)
    if len(ofn) > 0:
        ofn += '_'
    ofn += 'merged.bam'
    cmd = '/sambamba merge -t {0} /dev/stdout '.format(multiprocessing.cpu_count())
    cmd += ' '.join(input_bams) + ' | dx upload - -o {0} --brief'.format(ofn)
    print cmd
    dxid = subprocess.check_output(cmd, shell=True)
    dxid = dxid.strip()

    output = {}
    output['output_bam'] = dxpy.dxlink(dxid)

    return output

dxpy.run()
